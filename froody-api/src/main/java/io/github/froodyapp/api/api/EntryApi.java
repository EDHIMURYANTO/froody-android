/*
 * Froody API
 * API for Froody - http://froodyapp.gsantner.net/
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.github.froodyapp.api.api;

import io.github.froodyapp.api.invoker.ApiCallback;
import io.github.froodyapp.api.invoker.ApiClient;
import io.github.froodyapp.api.invoker.ApiException;
import io.github.froodyapp.api.invoker.ApiResponse;
import io.github.froodyapp.api.invoker.Configuration;
import io.github.froodyapp.api.invoker.Pair;
import io.github.froodyapp.api.invoker.ProgressRequestBody;
import io.github.froodyapp.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.froodyapp.api.model_.FroodyEntry;
import io.github.froodyapp.api.model_.ResponseEntryAdd;
import io.github.froodyapp.api.model_.ResponseOk;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntryApi {
    private ApiClient apiClient;

    public EntryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for entryAddPost
     * @param userId User.userId ** UID which identifies the User (required)
     * @param geohash Entry.geohash ** Geohash (&#x3D;position) of entry with precision &gt;&#x3D; 9 (required)
     * @param entryType Entry.entryType ** Type of entry (e.g. pear, apple,..) (required)
     * @param distributionType Entry.distributionType .&gt; Dist-type of entry (required)
     * @param certificationType Entry.certificationType ** Cert-type of entry (required)
     * @param description Entry.description ** Description of entry (required)
     * @param contact Entry.contact ** Contact info of entry (required)
     * @param address Entry.address ** Address of entry (reverse geocoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entryAddPostCall(Long userId, String geohash, Integer entryType, Integer distributionType, Integer certificationType, String description, String contact, String address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entry/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));
        if (geohash != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "geohash", geohash));
        if (entryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "entryType", entryType));
        if (distributionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distributionType", distributionType));
        if (certificationType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "certificationType", certificationType));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "description", description));
        if (contact != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "contact", contact));
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entryAddPostValidateBeforeCall(Long userId, String geohash, Integer entryType, Integer distributionType, Integer certificationType, String description, String contact, String address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling entryAddPost(Async)");
        }
        
        // verify the required parameter 'geohash' is set
        if (geohash == null) {
            throw new ApiException("Missing the required parameter 'geohash' when calling entryAddPost(Async)");
        }
        
        // verify the required parameter 'entryType' is set
        if (entryType == null) {
            throw new ApiException("Missing the required parameter 'entryType' when calling entryAddPost(Async)");
        }
        
        // verify the required parameter 'distributionType' is set
        if (distributionType == null) {
            throw new ApiException("Missing the required parameter 'distributionType' when calling entryAddPost(Async)");
        }
        
        // verify the required parameter 'certificationType' is set
        if (certificationType == null) {
            throw new ApiException("Missing the required parameter 'certificationType' when calling entryAddPost(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling entryAddPost(Async)");
        }
        
        // verify the required parameter 'contact' is set
        if (contact == null) {
            throw new ApiException("Missing the required parameter 'contact' when calling entryAddPost(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling entryAddPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entryAddPostCall(userId, geohash, entryType, distributionType, certificationType, description, contact, address, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a FroodyEntry with details
     * The Entry/Add endpoint returns a result, if the transmitted FroodyEntry could be created.
     * @param userId User.userId ** UID which identifies the User (required)
     * @param geohash Entry.geohash ** Geohash (&#x3D;position) of entry with precision &gt;&#x3D; 9 (required)
     * @param entryType Entry.entryType ** Type of entry (e.g. pear, apple,..) (required)
     * @param distributionType Entry.distributionType .&gt; Dist-type of entry (required)
     * @param certificationType Entry.certificationType ** Cert-type of entry (required)
     * @param description Entry.description ** Description of entry (required)
     * @param contact Entry.contact ** Contact info of entry (required)
     * @param address Entry.address ** Address of entry (reverse geocoded) (required)
     * @return ResponseEntryAdd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseEntryAdd entryAddPost(Long userId, String geohash, Integer entryType, Integer distributionType, Integer certificationType, String description, String contact, String address) throws ApiException {
        ApiResponse<ResponseEntryAdd> resp = entryAddPostWithHttpInfo(userId, geohash, entryType, distributionType, certificationType, description, contact, address);
        return resp.getData();
    }

    /**
     * Add a FroodyEntry with details
     * The Entry/Add endpoint returns a result, if the transmitted FroodyEntry could be created.
     * @param userId User.userId ** UID which identifies the User (required)
     * @param geohash Entry.geohash ** Geohash (&#x3D;position) of entry with precision &gt;&#x3D; 9 (required)
     * @param entryType Entry.entryType ** Type of entry (e.g. pear, apple,..) (required)
     * @param distributionType Entry.distributionType .&gt; Dist-type of entry (required)
     * @param certificationType Entry.certificationType ** Cert-type of entry (required)
     * @param description Entry.description ** Description of entry (required)
     * @param contact Entry.contact ** Contact info of entry (required)
     * @param address Entry.address ** Address of entry (reverse geocoded) (required)
     * @return ApiResponse&lt;ResponseEntryAdd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseEntryAdd> entryAddPostWithHttpInfo(Long userId, String geohash, Integer entryType, Integer distributionType, Integer certificationType, String description, String contact, String address) throws ApiException {
        com.squareup.okhttp.Call call = entryAddPostValidateBeforeCall(userId, geohash, entryType, distributionType, certificationType, description, contact, address, null, null);
        Type localVarReturnType = new TypeToken<ResponseEntryAdd>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a FroodyEntry with details (asynchronously)
     * The Entry/Add endpoint returns a result, if the transmitted FroodyEntry could be created.
     * @param userId User.userId ** UID which identifies the User (required)
     * @param geohash Entry.geohash ** Geohash (&#x3D;position) of entry with precision &gt;&#x3D; 9 (required)
     * @param entryType Entry.entryType ** Type of entry (e.g. pear, apple,..) (required)
     * @param distributionType Entry.distributionType .&gt; Dist-type of entry (required)
     * @param certificationType Entry.certificationType ** Cert-type of entry (required)
     * @param description Entry.description ** Description of entry (required)
     * @param contact Entry.contact ** Contact info of entry (required)
     * @param address Entry.address ** Address of entry (reverse geocoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryAddPostAsync(Long userId, String geohash, Integer entryType, Integer distributionType, Integer certificationType, String description, String contact, String address, final ApiCallback<ResponseEntryAdd> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryAddPostValidateBeforeCall(userId, geohash, entryType, distributionType, certificationType, description, contact, address, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseEntryAdd>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entryByIdGet
     * @param entryId Entry.entryId ** Entry ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entryByIdGetCall(Long entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entry/byId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (entryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "entryId", entryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entryByIdGetValidateBeforeCall(Long entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling entryByIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entryByIdGetCall(entryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Entry ** Get details of one entry
     * @param entryId Entry.entryId ** Entry ID (required)
     * @return FroodyEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FroodyEntry entryByIdGet(Long entryId) throws ApiException {
        ApiResponse<FroodyEntry> resp = entryByIdGetWithHttpInfo(entryId);
        return resp.getData();
    }

    /**
     * 
     * Entry ** Get details of one entry
     * @param entryId Entry.entryId ** Entry ID (required)
     * @return ApiResponse&lt;FroodyEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FroodyEntry> entryByIdGetWithHttpInfo(Long entryId) throws ApiException {
        com.squareup.okhttp.Call call = entryByIdGetValidateBeforeCall(entryId, null, null);
        Type localVarReturnType = new TypeToken<FroodyEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Entry ** Get details of one entry
     * @param entryId Entry.entryId ** Entry ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryByIdGetAsync(Long entryId, final ApiCallback<FroodyEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryByIdGetValidateBeforeCall(entryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FroodyEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entryDeleteGet
     * @param userId User.userId ** UID of client (required)
     * @param managementCode Entry.managementCode ** Code for check if allowed to delete (required)
     * @param entryId Entry.entryId ** Id of entry that should be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entryDeleteGetCall(Long userId, Integer managementCode, Long entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entry/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));
        if (managementCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "managementCode", managementCode));
        if (entryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "entryId", entryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entryDeleteGetValidateBeforeCall(Long userId, Integer managementCode, Long entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling entryDeleteGet(Async)");
        }
        
        // verify the required parameter 'managementCode' is set
        if (managementCode == null) {
            throw new ApiException("Missing the required parameter 'managementCode' when calling entryDeleteGet(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling entryDeleteGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entryDeleteGetCall(userId, managementCode, entryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Entry
     * Delete entry by code, userId and entryId
     * @param userId User.userId ** UID of client (required)
     * @param managementCode Entry.managementCode ** Code for check if allowed to delete (required)
     * @param entryId Entry.entryId ** Id of entry that should be deleted (required)
     * @return ResponseOk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseOk entryDeleteGet(Long userId, Integer managementCode, Long entryId) throws ApiException {
        ApiResponse<ResponseOk> resp = entryDeleteGetWithHttpInfo(userId, managementCode, entryId);
        return resp.getData();
    }

    /**
     * Delete an Entry
     * Delete entry by code, userId and entryId
     * @param userId User.userId ** UID of client (required)
     * @param managementCode Entry.managementCode ** Code for check if allowed to delete (required)
     * @param entryId Entry.entryId ** Id of entry that should be deleted (required)
     * @return ApiResponse&lt;ResponseOk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseOk> entryDeleteGetWithHttpInfo(Long userId, Integer managementCode, Long entryId) throws ApiException {
        com.squareup.okhttp.Call call = entryDeleteGetValidateBeforeCall(userId, managementCode, entryId, null, null);
        Type localVarReturnType = new TypeToken<ResponseOk>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an Entry (asynchronously)
     * Delete entry by code, userId and entryId
     * @param userId User.userId ** UID of client (required)
     * @param managementCode Entry.managementCode ** Code for check if allowed to delete (required)
     * @param entryId Entry.entryId ** Id of entry that should be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryDeleteGetAsync(Long userId, Integer managementCode, Long entryId, final ApiCallback<ResponseOk> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryDeleteGetValidateBeforeCall(userId, managementCode, entryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseOk>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entryPopularEntryTypesGet
     * @param geohash BlockInfo.geohash ** Geohash to get popular types around (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entryPopularEntryTypesGetCall(String geohash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entry/popularEntryTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (geohash != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "geohash", geohash));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entryPopularEntryTypesGetValidateBeforeCall(String geohash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'geohash' is set
        if (geohash == null) {
            throw new ApiException("Missing the required parameter 'geohash' when calling entryPopularEntryTypesGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entryPopularEntryTypesGetCall(geohash, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Entry.entryType[ ] ** Get a list of popular entry types on server (includes 1+8 blocks around geohash block)
     * @param geohash BlockInfo.geohash ** Geohash to get popular types around (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Integer> entryPopularEntryTypesGet(String geohash) throws ApiException {
        ApiResponse<List<Integer>> resp = entryPopularEntryTypesGetWithHttpInfo(geohash);
        return resp.getData();
    }

    /**
     * 
     * Entry.entryType[ ] ** Get a list of popular entry types on server (includes 1+8 blocks around geohash block)
     * @param geohash BlockInfo.geohash ** Geohash to get popular types around (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Integer>> entryPopularEntryTypesGetWithHttpInfo(String geohash) throws ApiException {
        com.squareup.okhttp.Call call = entryPopularEntryTypesGetValidateBeforeCall(geohash, null, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Entry.entryType[ ] ** Get a list of popular entry types on server (includes 1+8 blocks around geohash block)
     * @param geohash BlockInfo.geohash ** Geohash to get popular types around (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryPopularEntryTypesGetAsync(String geohash, final ApiCallback<List<Integer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryPopularEntryTypesGetValidateBeforeCall(geohash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
