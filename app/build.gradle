apply plugin: 'com.android.application'

ext {
    version_sdk = [
        compileSdk : 26,
        buildTools : "26.0.1",
        minSdk     : 14,
        //targetSdk: compileSdk,
    ]
    version_sdk.targetSdk = version_sdk.compileSdk
    version_lib = [
        appcompat   : "26.0.0",
        butterknife : "8.7.0",
    ]
}

android {
    compileSdkVersion version_sdk.compileSdk
    buildToolsVersion version_sdk.buildTools

    defaultConfig {
        minSdkVersion version_sdk.minSdk
        targetSdkVersion version_sdk.targetSdk

        versionCode 28
        versionName "1.0.6"

        applicationId "io.github.froodyapp"

        buildConfigField "int", "ENTRY_LIFETIME_DAYS", "60"
        buildConfigField "boolean", "IS_TEST_BUILD", "false"
        buildConfigField "boolean", "IS_GPLAY_BUILD", "false"
        buildConfigField("String[]", "APPLICATION_LANGUAGES", '{' + getUsedAndroidLanguages().collect {"\"${it}\""}.join(",")  + '}')
        //vectorDrawables.useSupportLibrary = true
    }

    productFlavors {
        flavorDefault {
        }

        flavorGplay {
            buildConfigField "boolean", "IS_GPLAY_BUILD", "true"
        }

        flavorTest {
            applicationId "io.github.froodyapp.test"
            versionCode = Integer.parseInt(new Date().format('yyMMdd'))
            versionName = new Date().format('yyMMdd')
            buildConfigField "boolean", "IS_TEST_BUILD", "true"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warning 'InvalidPackage'
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
    }
}

dependencies {
    // Sub-Projects
    compile(project(':froody-api')) {
        exclude module: "httpmime"
        exclude module: "httpcore"
        exclude module: "httpclient"
    }

    // Jars
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    // Android standard libs
    compile "com.android.support:appcompat-v7:${version_lib.appcompat}"
    compile "com.android.support:design:${version_lib.appcompat}"
    compile "com.android.support:support-v4:${version_lib.appcompat}"
    compile "com.android.support:cardview-v7:${version_lib.appcompat}"

    // Open Street Map & Geo
    compile 'org.osmdroid:osmdroid-android:5.6.5'
    compile 'com.github.MKergall:osmbonuspack:6.4'
    compile 'ch.hsr:geohash:1.3.0'

    // Tool libraries
    compile "com.jakewharton:butterknife:${version_lib.butterknife}"

    annotationProcessor "com.jakewharton:butterknife-compiler:${version_lib.butterknife}"
}

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection"])
static String[] getUsedAndroidLanguages() {
    Set<String> langs = new HashSet<>()
    new File('.').eachFileRecurse(groovy.io.FileType.DIRECTORIES) {
        final foldername = it.name
        if (foldername.startsWith('values-') && !it.canonicalPath.contains("build" + File.separator + "intermediates")) {
            new File(it.toString()).eachFileRecurse(groovy.io.FileType.FILES) {
                if (it.name.toLowerCase().endsWith(".xml") && it.getCanonicalFile().getText('UTF-8').contains("<string")) {
                    langs.add(foldername.replace("values-", ""))

                }
            }
        }
    }
    return langs.toArray(new String[langs.size()])
}

final String RAW_DIR = "app/src/main/res/raw"
final String[] ROOT_TO_RAW_COPYFILES = ["README.md", "LICENSE.txt", "CHANGELOG.md", "CONTRIBUTORS.md"]

// Called before building
task copyRepoFiles(type: Copy) {

    // Copy files over to raw dir
    from rootProject.files(ROOT_TO_RAW_COPYFILES)
    into RAW_DIR.replaceFirst("app/", "")
    rename { String fileName ->
        fileName.replace(fileName, fileName.toLowerCase())
    }
}

tasks.copyRepoFiles.execute()
